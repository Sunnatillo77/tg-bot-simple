import telebot
from telebot import types
import logging
import os
from dotenv import load_dotenv
import db

load_dotenv()

TOKEN = os.getenv("TOKEN")
DB_PATH = os.getenv("DB_PATH", "bot.db")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TOKEN)


def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand("note_add", "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand("note_list", "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"),
        types.BotCommand("note_find", "–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫"),
        types.BotCommand("note_edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand("note_del", "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"),
        types.BotCommand("note_count", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫"),
        types.BotCommand("note_export", "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫"),
    ]
    bot.set_my_commands(commands)

#yyyyy
@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_text = """
ü§ñ **–ë–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö**
     

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/note_add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_list - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏  
/note_find - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏
/note_edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_del - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_count - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/note_export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫

–ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é!
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown')


@bot.message_handler(commands=['note_add'])
def add_note_handler(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    try:
        text = message.text.replace('/note_add', '').strip()
        if not text:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note_add <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>")
            return

        if len(text) > 200:
            bot.reply_to(message, "‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        note_id = db.add_note(message.from_user.id, text)
        bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏"
        if "UNIQUE" in str(e):
            error_msg = "‚ùå –¢–∞–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        bot.reply_to(message, error_msg)
        logger.error(f"Error adding note: {e}")


@bot.message_handler(commands=['note_list'])
def list_notes_handler(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"""
    try:
        notes = db.list_notes(message.from_user.id, limit=10)
        if not notes:
            bot.reply_to(message, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
            return

        response = "üìã **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:**\n\n"
        for note in notes:
            response += f"#{note['id']} - {note['text']}\n"
            response += f"<i>{note['created_at']}</i>\n\n"

        bot.reply_to(message, response, parse_mode='HTML')

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫")
        logger.error(f"Error listing notes: {e}")


@bot.message_handler(commands=['note_find'])
def find_notes_handler(message):
    """–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫"""
    try:
        query = message.text.replace('/note_find', '').strip()
        if not query:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note_find <–∑–∞–ø—Ä–æ—Å>")
            return

        notes = db.find_notes(message.from_user.id, query)
        if not notes:
            bot.reply_to(message, f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        response = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':**\n\n"
        for note in notes:
            response += f"#{note['id']} - {note['text']}\n\n"

        bot.reply_to(message, response, parse_mode='HTML')

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–º–µ—Ç–æ–∫")
        logger.error(f"Error finding notes: {e}")


@bot.message_handler(commands=['note_edit'])
def edit_note_handler(message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    try:
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
            return

        note_id = parts[1]
        new_text = parts[2]

        if not note_id.isdigit():
            bot.reply_to(message, "‚ùå ID –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        if len(new_text) > 200:
            bot.reply_to(message, "‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        success = db.update_note(message.from_user.id, int(note_id), new_text)
        if success:
            bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")
        logger.error(f"Error editing note: {e}")


@bot.message_handler(commands=['note_del'])
def delete_note_handler(message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    try:
        parts = message.text.split(' ', 1)
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note_del <id>")
            return

        note_id = parts[1]
        if not note_id.isdigit():
            bot.reply_to(message, "‚ùå ID –∑–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        success = db.delete_note(message.from_user.id, int(note_id))
        if success:
            bot.reply_to(message, f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞!")
        else:
            bot.reply_to(message, f"‚ùå –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")
        logger.error(f"Error deleting note: {e}")


@bot.message_handler(commands=['note_count'])
def count_notes_handler(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
    try:
        count = db.count_notes(message.from_user.id)
        stats = db.get_notes_statistics(message.from_user.id, days=7)

        response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫:**\n\n"
        response += f"–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: **{count}**\n\n"

        if stats:
            response += "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
            for stat in stats:
                response += f"{stat['date']}: {stat['count']} –∑–∞–º–µ—Ç–æ–∫\n"
        else:
            response += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç\n"

        bot.reply_to(message, response, parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        logger.error(f"Error counting notes: {e}")


@bot.message_handler(commands=['note_export'])
def export_notes_handler(message):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª"""
    try:
        notes = db.export_notes(message.from_user.id)
        if not notes:
            bot.reply_to(message, "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        filename = f"notes_{message.from_user.id}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}\n")
            f.write(f"–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}\n")
            f.write("=" * 50 + "\n\n")

            for note in notes:
                f.write(f"#{note['id']} - {note['text']}\n")
                f.write(f"–°–æ–∑–¥–∞–Ω–æ: {note['created_at']}\n")
                f.write("-" * 30 + "\n")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        with open(filename, 'rb') as f:
            bot.send_document(message.chat.id, f, caption="üìÅ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏")

        logger.info(f"Notes exported for user {message.from_user.id}")

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–º–µ—Ç–æ–∫")
        logger.error(f"Error exporting notes: {e}")


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.reply_to(message, "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏")


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    setup_bot_commands()

    logger.info("Bot started successfully")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    bot.infinity_polling(skip_pending=True)