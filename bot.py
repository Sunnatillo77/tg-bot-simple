import os
import logging
from dotenv import load_dotenv
import telebot
from telebot import types
import requests
import time
import sys

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–í .env —Ñ–∞–π–ª–µ –Ω–µ—Ç TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–≥–æ–¥—ã
WMO_DESC = {
    0: "—è—Å–Ω–æ", 1: "–≤ –æ—Å–Ω. —è—Å–Ω–æ", 2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", 3: "–ø–∞—Å–º—É—Ä–Ω–æ",
    45: "—Ç—É–º–∞–Ω", 48: "–∏–∑–º–æ—Ä–æ–∑—å", 51: "–º–æ—Ä–æ—Å—å", 53: "–º–æ—Ä–æ—Å—å", 55: "—Å–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "–¥–æ–∂–¥—å", 63: "–¥–æ–∂–¥—å", 65: "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å", 71: "—Å–Ω–µ–≥",
    80: "–ª–∏–≤–Ω–∏", 95: "–≥—Ä–æ–∑–∞"
}

# –ö—ç—à –¥–ª—è –ø–æ–≥–æ–¥—ã
weather_cache = {}
CACHE_DURATION = 600


def parse_ints_from_text(text: str) -> list[int]:
    text = text.replace(",", " ")
    tokens = [t for t in text.split() if not t.startswith("/")]
    result = []
    for t in tokens:
        cleaned_token = t.strip().lstrip("-")
        if cleaned_token.isdigit():
            result.append(int(t))
    return result


def make_main_keyboard() -> types.ReplyKeyboardMarkup:
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üìä –°—É–º–º–∞", "üìà –ú–∞–∫—Å–∏–º—É–º")
    keyboard.row("‚ÑπÔ∏è –û –±–æ—Ç–µ", "üå§ –ü–æ–≥–æ–¥–∞ (–ú–æ—Å–∫–≤–∞)")
    keyboard.row("/help", "/confirm", "/hide")
    return keyboard


def fetch_weather_moscow() -> str:
    current_time = time.time()
    if 'data' in weather_cache and current_time - weather_cache.get('timestamp', 0) < CACHE_DURATION:
        return weather_cache['data']

    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": 55.7558,
        "longitude": 37.6173,
        "current": "temperature_2m,weather_code",
        "timezone": "Europe/Moscow"
    }
    try:
        response = requests.get(url, params=params, timeout=5)
        response.raise_for_status()
        current_data = response.json()["current"]
        temperature = round(current_data["temperature_2m"])
        weather_code = int(current_data.get("weather_code", 0))

        if temperature < 0:
            emoji = "‚ùÑÔ∏è"
        elif temperature > 20:
            emoji = "‚òÄÔ∏è"
        else:
            emoji = "‚õÖ"

        weather_text = f"{emoji} –ú–æ—Å–∫–≤–∞: —Å–µ–π—á–∞—Å {temperature}¬∞C, {WMO_DESC.get(weather_code, '–ø–æ –¥–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª–∏')}"

        weather_cache['data'] = weather_text
        weather_cache['timestamp'] = current_time

        return weather_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(commands=['start'])
def start(message):
    welcome_text = """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start, /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/sum - —Å—É–º–º–∞ —á–∏—Å–µ–ª
/max - –º–∞–∫—Å–∏–º—É–º —á–∏—Å–µ–ª
/confirm - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
/hide - —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/show - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"""

    bot.reply_to(message, welcome_text, reply_markup=make_main_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")


@bot.message_handler(commands=['help'])
def help_cmd(message):
    help_text = """üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üîπ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
/sum 2 3 5 - —Å—É–º–º–∞ —á–∏—Å–µ–ª
/max 2 3 5 - –º–∞–∫—Å–∏–º—É–º —á–∏—Å–µ–ª

üîπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:
/confirm - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
/hide - —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/show - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!"""
    bot.reply_to(message, help_text)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç {message.from_user.first_name}")


@bot.message_handler(commands=['about'])
def about(message):
    about_text = """‚ÑπÔ∏è –û –±–æ—Ç–µ:

–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram Bot API.

üìä –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
‚Ä¢ –°—É–º–º–∞ –∏ –º–∞–∫—Å–∏–º—É–º —á–∏—Å–µ–ª
‚Ä¢ –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

üõ† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ Python 3.11
‚Ä¢ pyTelegramBotAPI
‚Ä¢ Open-Meteo API"""
    bot.reply_to(message, about_text)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /about –æ—Ç {message.from_user.first_name}")


@bot.message_handler(commands=['sum'])
def sum_command(message):
    logging.info(f"/sum –æ—Ç {message.from_user.first_name}: {message.text}")
    numbers = parse_ints_from_text(message.text)
    logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —á–∏—Å–ª–∞: {numbers}")

    if numbers:
        total = sum(numbers)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—É–º–º—ã: {total}")
        bot.reply_to(message, f"üìä –°—É–º–º–∞: {total}")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: /sum 2 3 10 –∏–ª–∏ 2, 3, -5")


@bot.message_handler(commands=['max'])
def max_command(message):
    logging.info(f"/max –æ—Ç {message.from_user.first_name}: {message.text}")
    numbers = parse_ints_from_text(message.text)
    logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω—ã —á–∏—Å–ª–∞: {numbers}")

    if numbers:
        maximum = max(numbers)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–∫—Å–∏–º—É–º–∞: {maximum}")
        bot.reply_to(message, f"üìà –ú–∞–∫—Å–∏–º—É–º: {maximum}")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: /max 2 3 10 –∏–ª–∏ 2, 3, -5")


@bot.message_handler(commands=['show'])
def show_keyboard(message):
    bot.reply_to(message, "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=make_main_keyboard())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∫–∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")


@bot.message_handler(commands=['hide'])
def hide_keyboard(message):
    remove_keyboard = types.ReplyKeyboardRemove()
    bot.reply_to(message, "üëã –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!", reply_markup=remove_keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} —Å–∫—Ä—ã–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É")


@bot.message_handler(commands=['confirm'])
def confirm_command(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm:yes"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm:no"),
        types.InlineKeyboardButton("üòÇ –ü–æ–∑–∂–µ", callback_data="confirm:later")
    )
    bot.send_message(message.chat.id, "‚ùì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?", reply_markup=keyboard)
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /confirm –æ—Ç {message.from_user.first_name}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
def about_button(message):
    bot.reply_to(message,
                 "ü§ñ –Ø —É–º–Ω—ã–π –±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n‚Ä¢ –°—É–º–º–∞ —á–∏—Å–µ–ª\n‚Ä¢ –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞\n‚Ä¢ –ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π")
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–û –±–æ—Ç–µ' –æ—Ç {message.from_user.first_name}")


@bot.message_handler(func=lambda message: message.text == "üìä –°—É–º–º–∞")
def sum_button(message):
    bot.send_message(message.chat.id, "üí≠ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, process_sum_input)
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–°—É–º–º–∞' –æ—Ç {message.from_user.first_name}")


@bot.message_handler(func=lambda message: message.text == "üìà –ú–∞–∫—Å–∏–º—É–º")
def max_button(message):
    bot.send_message(message.chat.id, "üí≠ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:")
    bot.register_next_step_handler(message, process_max_input)
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ú–∞–∫—Å–∏–º—É–º' –æ—Ç {message.from_user.first_name}")


@bot.message_handler(func=lambda message: message.text == "üå§ –ü–æ–≥–æ–¥–∞ (–ú–æ—Å–∫–≤–∞)")
def weather_button(message):
    bot.send_message(message.chat.id, "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")
    weather_info = fetch_weather_moscow()
    bot.reply_to(message, weather_info)
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ü–æ–≥–æ–¥–∞' –æ—Ç {message.from_user.first_name}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞
def process_sum_input(message):
    numbers = parse_ints_from_text(message.text)
    if numbers:
        total = sum(numbers)
        bot.reply_to(message, f"üìä –°—É–º–º–∞: {total}")
        logging.info(f"–°—É–º–º–∞ —á–∏—Å–µ–ª {numbers} = {total}")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: 2 3 10 –∏–ª–∏ 2, 3, -5")


def process_max_input(message):
    numbers = parse_ints_from_text(message.text)
    if numbers:
        maximum = max(numbers)
        bot.reply_to(message, f"üìà –ú–∞–∫—Å–∏–º—É–º: {maximum}")
        logging.info(f"–ú–∞–∫—Å–∏–º—É–º —á–∏—Å–µ–ª {numbers} = {maximum}")
    else:
        bot.reply_to(message, "‚ùå –ù–µ –≤–∏–∂—É —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä: 2 3 10 –∏–ª–∏ 2, 3, -5")


# Inline –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm:"))
def handle_confirmation(call):
    choice = call.data.split(":")[1]
    bot.answer_callback_query(call.id, "–í—ã–±–æ—Ä –ø—Ä–∏–Ω—è—Ç!")
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=None
    )

    if choice == "yes":
        response = "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
    elif choice == "no":
        response = "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã."
    else:
        response = "‚è≥ –û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ –ø–æ—Ç–æ–º üòä"

    bot.send_message(call.message.chat.id, response)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} –≤—ã–±—Ä–∞–ª: {choice}")


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        bot.reply_to(message, "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏
        bot.remove_webhook()
        time.sleep(1)

        print("‚úÖ –ó–∞–ø—É—Å–∫ polling...")
        bot.infinity_polling(skip_pending=True, timeout=60)

    except telebot.apihelper.ApiException as e:
        if "Conflict" in str(e):
            print("‚ùå –û–®–ò–ë–ö–ê: –£–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
            print("üí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ –æ–∫–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    except KeyboardInterrupt:
        print("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("üëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")